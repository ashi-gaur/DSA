//You are given an integer 𝑛. Your task is to find the number of good binary strings of length n. 
//A good binary string is defined as a binary string that contains exactly one occurrence of the substring "00" and any number of single '0's and '1's.
//Phone PE OA Question
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.println(func(n)+" "+countGoodStrings(n));
    }
    public static int func(int n) {
        if (n < 3) return n - 1; // Base case: no "00" can exist in strings of length < 3

        int[][] dp = new int[n + 1][3]; // dp[i][0] - ends with '1', dp[i][1] - ends with '0', dp[i][2] - contains "00"
        int[][] g = new int[n + 1][2];  // g[i][0] - no "00" ending with '0', g[i][1] - no "00" ending with '1'

        // Initial values for g array
        g[2][1] = 2; // "10" and "11"
        g[2][0] = 1; // "01"

        // Initial values for dp array
        dp[3][0] = 1; // "100"
        dp[3][1] = 0;
        dp[3][2] = 1; // "001"

        for (int i = 3; i <= n; i++) {
            // Update g array
            g[i][1] = g[i - 1][1] + g[i - 1][0]; // Any string of length i-1 without "00"
            g[i][0] = g[i][1];

            // Update dp array
            dp[i][0] = dp[i - 1][0] + dp[i - 1][2]; // Previous good strings ending in '1' or containing "00"
            dp[i][1] = dp[i - 1][1] + dp[i - 1][2]; // Previous good strings ending in '0' or containing "00"
            dp[i][2] = g[i - 3][0] + g[i - 3][1];   // Placing "00" at the end of strings without "00" of length i-3
            if (dp[i][2] == 0) dp[i][2] = 1; // Adjust if the value is zero
        }

        return dp[n][0] + dp[n][1] + dp[n][2];
    }
}
