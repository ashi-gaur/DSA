//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            int n = Integer.parseInt(br.readLine().trim());
            
            String input_line[] = br.readLine().trim().split("\\s+");
            int[][] matrix = new int[n][n];
            for(int i=0; i<n; i++) {
                for (int j = 0; j < n; ++j) {
                    matrix[i][j] = Integer.parseInt(input_line[i * n + j]); 
                }
            }
            Solution obj = new Solution();
            int[] ans = obj.antiDiagonalPattern(matrix);
            for(int i = 0; i < ans.length; i++)
                System.out.print(ans[i] + " ");
            System.out.println();
        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution
{
    public int[] antiDiagonalPattern(int[][] matrix)
    {
        // Code here
        HashMap<Integer,List<Integer>> map = new HashMap<>();
        int row = matrix.length;
        int col = matrix[0].length;
        int total = row * col ;
        int req[] = new int [total];
    
        for(int i = 0 ; i<row;i++){
            for(int j = 0;j<col;j++){
                int key = i+j;
                if(map.get(key)!=null){
                    map.get(key).add(matrix[i][j]);
                } else {
                    List<Integer> list = new ArrayList<>();
                    list.add(matrix[i][j]);
                    map.put(i+j,list);
                }
            }
        }
        int i = 0 ;
        for(Map.Entry<Integer,List<Integer>> m : map.entrySet()){
            List<Integer> temp = m.getValue();
            for(int j = 0;j<temp.size();j++){
                req[i++] = temp.get(j);
            }
        }
        
        return req;
    }
}
