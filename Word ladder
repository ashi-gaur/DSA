class pair{
    String first;
    int second;
    pair(String ffirst,int ssec){
        this.first=ffirst;
        this.second=ssec;
    }
}
class Solution {
    public int ladderLength(String begin, String end, List<String> wordList) {
        Queue<pair> q=new LinkedList<>();
        q.add(new pair(begin,1));
        Set<String> st=new HashSet<String>();
        int l=wordList.size();
        for(int i=0;i<l;i++){
            st.add(wordList.get(i));
        }
        st.remove(begin);
        while(!q.isEmpty()){
            String word=q.peek().first;
            int steps=q.peek().second;
            q.remove();
            if(word.equals(end)==true) return steps;
            for(int i=0;i<word.length();i++){
                for(char c='a';c<='z';c++){
                    char[] ch=word.toCharArray();
                    ch[i]=c;
                    String cr=new String(ch);
                    if(st.contains(cr)==true){
                        st.remove(cr);
                        q.add(new pair(cr,steps+1));
                    }
                }
            }
        }
        return 0;
    }
}
