/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void addNode(LinkedList<TreeNode> queue, TreeNode node, int val, int left)
    {
        if (node == null) return;
        node.val = val * 2 - left;
        queue.add(node);
    }

    public int bfs(LinkedList<TreeNode> queue)
    {
        int maxCount = 1;
        int size = 1;
        while (size > 0) {
            while (size-- > 0) {
                TreeNode node = queue.poll();
                addNode(queue, node.left, node.val, 1);
                addNode(queue, node.right,node.val, 0);
            }
            size = queue.size();
            if (size > 0)
                maxCount = Math.max(queue.getLast().val - queue.getFirst().val + 1, maxCount);
        }
        return maxCount;
    }

    public int widthOfBinaryTree(TreeNode root) {
        LinkedList<TreeNode> queue = new LinkedList<>();
        if (root == null) return 0;
        root.val = 1;
        queue.offer(root);
        return bfs(queue);
    }
}
